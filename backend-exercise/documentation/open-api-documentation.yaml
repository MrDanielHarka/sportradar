openapi: 3.0.0
info:
  title: Bookstore API
  version: 1.0.0
  description: |-
    <style>.sc-kYHfwS.hjTfvW {display:none;}</style>
     This is a sample Bookstore Server based on the OpenAPI 3.0 specification.  
     
     Created by <b><a href="https://github.com/mindthegabs" target="_blank">Gabriel Aichinger</a></b> and <b><a href="https://github.com/MrDanielHarka" target="_blank">Daniel Harka</a></b>.
servers:
  - url: https://14cqtx-3000.csb.app
paths:
  /books:
    get:
      summary: Retrieve all books
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: You are not authorized for this action.
  '/books/{bookId}':
    get:
      summary: Retrieve a specific book
      parameters:
        - name: bookId
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: No such book.
    put:
      summary: Update a specific book
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: No such book.
        '401':
          description: You are not authorized for this action.

    delete:
      summary: Delete a specific book
      parameters:
        - name: bookId
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully.
        '404':
          description: No such book.
        '401':
          description: You are not authorized for this action.
  '/authors':
    get:
      summary: Retrieve all authors
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '201':
          description: Author added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '401':
          description: You are not authorized for this action.
        '404':
          description: Author already exists.
  '/authors/{authorId}':
    get:
      summary: Retrieve a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: No such author.
    put:
      summary: Update a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '200':
          description: Author updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: No such author.
        '401':
          description: You are not authorized for this action.
    delete:
      summary: Delete a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted successfully.
        '401':
          description: You are not authorized for this action.
        '404':
          description: Failed to delete author. Author with id {authorId} does not exist.
  '/authors/{authorId}/books':
    get:
      summary: Retrieve all books by a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: No such author.
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author_id:
          type: integer
        published_year:
          type: integer
    BookInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        title:
          type: string
        author_id:
          type: integer
        published_year:
          type: integer
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    AuthorInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        id:
          type: integer
        name:
          type: string
